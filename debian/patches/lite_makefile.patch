Subject: stop overriting Lite/README
Forwarded: not-needed
Author: Nicholas Bamber <nicholas@periapt.co.uk>
Reviewed-by: gregor herrmann <gregoa@debian.org>
Last-Update: 2011-10-20

--- a/Lite/Makefile.PL
+++ b/Lite/Makefile.PL
@@ -17,32 +17,32 @@
     'dist'		=> {COMPRESS=>'gzip', SUFFIX=>'gz'}
 );
 
-sub MY::top_targets {
-  package MY;
-  my $inherited = shift->SUPER::top_targets(@_);
-  $inherited =~ s/(pure_all\s+::.+)/$1 README/;
-  $inherited;
-}
+#sub MY::top_targets {
+#  package MY;
+#  my $inherited = shift->SUPER::top_targets(@_);
+#  $inherited =~ s/(pure_all\s+::.+)/$1 README/;
+# $inherited;
+#}
 
-sub MY::post_constants {
-  my $post_constants = $Config{scriptdirexp} .'/pod2text';
-  if (-e $post_constants) {
-    $post_constants = q|
-MY_POD2TEXT = |. $post_constants .q|
-|;
-  } else {   
-    $post_constants = q|
-MY_POD2TEXT = echo "perl distro missing 'pod2text' to convert " |;
-  }
-}
+#sub MY::post_constants {
+#  my $post_constants = $Config{scriptdirexp} .'/pod2text';
+#  if (-e $post_constants) {
+#    $post_constants = q|
+#MY_POD2TEXT = |. $post_constants .q|
+#|;
+#  } else {   
+#    $post_constants = q|
+#MY_POD2TEXT = echo "perl distro missing 'pod2text' to convert " |;
+#  }
+#}
 
-sub MY::postamble {
-  package MY;
-  my $postamble = q|
-README  : |. $module .q|
-	@$(MY_POD2TEXT) |. $module .q| > README
-
-|;
-}
+#sub MY::postamble {
+#  package MY;
+#  my $postamble = q|
+#README  : |. $module .q|
+#	@$(MY_POD2TEXT) |. $module .q| > README
+#
+#|;
+#}
 
 WriteMakefile(%makeparms);
--- a/Lite/Util/README
+++ b/Lite/Util/README
@@ -137,39 +137,45 @@
             ::x:d.d.d.d
       and so on...
 
-    * $dotquad = inet_ntoa($netaddr);
+    *   $dotquad = inet_ntoa($netaddr);
+
         Convert a packed IPv4 network address to a dot-quad IP address.
 
           input:        packed network address
           returns:      IP address i.e. 10.4.12.123
 
-    * $netaddr = inet_aton($dotquad);
+    *   $netaddr = inet_aton($dotquad);
+
         Convert a dot-quad IP address into an IPv4 packed network address.
 
           input:        IP address i.e. 192.5.16.32
           returns:      packed network address
 
-    * $ipv6addr = ipv6_aton($ipv6_text);
+    *   $ipv6addr = ipv6_aton($ipv6_text);
+
         Takes an IPv6 address of the form described in rfc1884 and returns a
         128 bit binary RDATA string.
 
           input:        ipv6 text
           returns:      128 bit RDATA string
 
-    * $ipv6_text = ipv6_ntoa($ipv6naddr);
+    *   $ipv6_text = ipv6_ntoa($ipv6naddr);
+
         Convert a 128 bit binary IPv6 address to compressed rfc 1884 text
         representation.
 
           input:        128 bit RDATA string
           returns:      ipv6 text
 
-    * $hex_text = ipv6_n2x($ipv6addr);
+    *   $hex_text = ipv6_n2x($ipv6addr);
+
         Takes an IPv6 RDATA string and returns an 8 segment IPv6 hex address
 
           input:        128 bit RDATA string
           returns:      x:x:x:x:x:x:x:x
 
-    * $dec_text = ipv6_n2d($ipv6addr);
+    *   $dec_text = ipv6_n2d($ipv6addr);
+
         Takes an IPv6 RDATA string and returns a mixed hex - decimal IPv6
         address with the 6 uppermost chunks in hex and the lower 32 bits in
         dot-quad representation.
@@ -177,7 +183,8 @@
           input:        128 bit RDATA string
           returns:      x:x:x:x:x:x:d.d.d.d
 
-    * $ipv6naddr = inet_any2n($dotquad or $ipv6_text);
+    *   $ipv6naddr = inet_any2n($dotquad or $ipv6_text);
+
         This function converts a text IPv4 or IPv6 address in text format in
         any standard notation into a 128 bit IPv6 string address. It
         prefixes any dot-quad address (if found) with '::' and passes it to
@@ -186,7 +193,8 @@
           input:        dot-quad or rfc1844 address
           returns:      128 bit IPv6 string
 
-    * $rv = hasbits($bits128);
+    *   $rv = hasbits($bits128);
+
         This function returns true if there are one's present in the 128 bit
         string and false if all the bits are zero.
 
@@ -206,7 +214,8 @@
           input:        128 bit IPv6 string
           returns:      true if any bits are present
 
-    * $ipv6naddr = inet_4map6($netaddr or $ipv6naddr
+    *   $ipv6naddr = inet_4map6($netaddr or $ipv6naddr
+
         This function returns an ipV6 network address with the first 80 bits
         set to zero and the next 16 bits set to one, while the last 32 bits
         are filled with the ipV4 address.
@@ -222,7 +231,8 @@
 
                 ::ffff::d.d.d.d    or    ::d.d.d.d
 
-    * $rv = isIPv4($bits128);
+    *   $rv = isIPv4($bits128);
+
         This function returns true if there are no on bits present in the
         IPv6 portion of the 128 bit string and false otherwise.
 
@@ -230,17 +240,20 @@
 
         Note: this is an old and deprecated ipV4 compatible ipV6 address
 
-    * $rv = isNewIPv4($bits128);
+    *   $rv = isNewIPv4($bits128);
+
         This function return true if the IPv6 128 bit string is of the form
 
                 ::ffff::d.d.d.d
 
-    * $rv = isAnyIPv4($bits128);
+    *   $rv = isAnyIPv4($bits128);
+
         This function return true if the IPv6 bit string is of the form
 
                 ::d.d.d.d       or      ::ffff::d.d.d.d
 
-    * $dotquad or $hex_text = inet_n2dx($ipv6naddr);
+    *   $dotquad or $hex_text = inet_n2dx($ipv6naddr);
+
         This function does the right thing and returns the text for either a
         dot-quad IPv4 or a hex notation IPv6 address.
 
@@ -248,7 +261,8 @@
           returns:      ddd.ddd.ddd.ddd
                     or  x:x:x:x:x:x:x:x
 
-    * $dotquad or $dec_text = inet_n2ad($ipv6naddr);
+    *   $dotquad or $dec_text = inet_n2ad($ipv6naddr);
+
         This function does the right thing and returns the text for either a
         dot-quad IPv4 or a hex::decimal notation IPv6 address.
 
@@ -256,31 +270,36 @@
           returns:      ddd.ddd.ddd.ddd
                     or  x:x:x:x:x:x:ddd.ddd.ddd.dd
 
-    * $netaddr = inet_pton($AF_family,$hex_text);
+    *   $netaddr = inet_pton($AF_family,$hex_text);
+
         This function takes an IP address in IPv4 or IPv6 text format and
         converts it into binary format. The type of IP address conversion is
         controlled by the FAMILY argument.
 
-    * $hex_text = inet_ntop($AF_family,$netaddr);
+    *   $hex_text = inet_ntop($AF_family,$netaddr);
+
         This function takes and IP address in binary format and converts it
         into text format. The type of IP address conversion is controlled by
         the FAMILY argument.
 
         NOTE: inet_ntop ALWAYS returns lowercase characters.
 
-    * $hex_text = packzeros($hex_text);
+    *   $hex_text = packzeros($hex_text);
+
         This function optimizes and rfc 1884 IPv6 hex address to reduce the
         number of long strings of zero bits as specified in rfc 1884, 2.2
         (2) by substituting :: for the first occurence of the longest string
         of zeros in the address.
 
-    * $ipv6naddr = ipv4to6($netaddr);
+    *   $ipv6naddr = ipv4to6($netaddr);
+
         Convert an ipv4 network address into an IPv6 network address.
 
           input:        32 bit network address
           returns:      128 bit network address
 
-    * $ipv6naddr = mask4to6($netaddr);
+    *   $ipv6naddr = mask4to6($netaddr);
+
         Convert an ipv4 network address/mask into an ipv6 network mask.
 
           input:        32 bit network/mask address
@@ -288,28 +307,32 @@
 
         NOTE: returns the high 96 bits as one's
 
-    * $ipv6naddr = ipanyto6($netaddr);
+    *   $ipv6naddr = ipanyto6($netaddr);
+
         Similar to ipv4to6 except that this function takes either an IPv4 or
         IPv6 input and always returns a 128 bit IPv6 network address.
 
           input:        32 or 128 bit network address
           returns:      128 bit network address
 
-    * $ipv6naddr = maskanyto6($netaddr);
+    *   $ipv6naddr = maskanyto6($netaddr);
+
         Similar to mask4to6 except that this function takes either an IPv4
         or IPv6 netmask and always returns a 128 bit IPv6 netmask.
 
           input:        32 or 128 bit network mask
           returns:      128 bit network mask
 
-    * $netaddr = ipv6to4($pv6naddr);
+    *   $netaddr = ipv6to4($pv6naddr);
+
         Truncate the upper 96 bits of a 128 bit address and return the lower
         32 bits. Returns an IPv4 address as returned by inet_aton.
 
           input:        128 bit network address
           returns:      32 bit inet_aton network address
 
-    * $bitsXn = shiftleft($bits128,$n);
+    *   $bitsXn = shiftleft($bits128,$n);
+
           input:        128 bit string variable,
                         number of shifts [optional]
           returns:      bits X n shifts
@@ -317,7 +340,8 @@
           NOTE: a single shift is performed
                 if $n is not specified
 
-    * addconst($ipv6naddr,$signed_32con);
+    *   addconst($ipv6naddr,$signed_32con);
+
         Add a signed constant to a 128 bit string variable.
 
           input:        128 bit IPv6 string,
@@ -325,7 +349,8 @@
           returns:  scalar      carry
                     array       (carry, result)
 
-    * add128($ipv6naddr1,$ipv6naddr2);
+    *   add128($ipv6naddr1,$ipv6naddr2);
+
         Add two 128 bit string variables.
 
           input:        128 bit string var1,
@@ -333,7 +358,8 @@
           returns:  scalar      carry
                     array       (carry, result)
 
-    * sub128($ipv6naddr1,$ipv6naddr2);
+    *   sub128($ipv6naddr1,$ipv6naddr2);
+
         Subtract two 128 bit string variables.
 
           input:        128 bit string var1,
@@ -347,7 +373,8 @@
                 i.e.    if ARG1 >= ARG2 then carry = 1
                 or      if ARG1  < ARG2 then carry = 0
 
-    * ($spurious,$cidr) = notcontiguous($mask128);
+    *   ($spurious,$cidr) = notcontiguous($mask128);
+
         This function counts the bit positions remaining in the mask when
         the rightmost '0's are removed.
 
@@ -358,27 +385,31 @@
                             contiguous one's,
                         128 bit cidr number
 
-    * $bcdtext = bin2bcd($bits128);
+    *   $bcdtext = bin2bcd($bits128);
+
         Convert a 128 bit binary string into binary coded decimal text
         digits.
 
           input:        128 bit string variable
           returns:      string of bcd text digits
 
-    * $bits128 = bcd2bin($bcdtxt);
+    *   $bits128 = bcd2bin($bcdtxt);
+
         Convert a bcd text string to 128 bit string variable
 
           input:        string of bcd text digits
           returns:      128 bit string variable
 
-    * $modetext = mode;
+    *   $modetext = mode;
+
         Returns the operating mode of this module.
 
                 input:          none
                 returns:        "Pure Perl"
                            or   "CC XS"
 
-    * ($name,$aliases,$addrtype,$length,@addrs)=naip_gethostbyname(NAME);
+    *   ($name,$aliases,$addrtype,$length,@addrs)=naip_gethostbyname(NAME);
+
         Replacement for Perl's gethostbyname if Socket6 is available
 
         In ARRAY context, returns a list of five elements, the hostname or
@@ -405,15 +436,18 @@
         For a gethostbyname2 emulator that behave like Socket6, see: the
         Net::DNS::Dig manpage
 
-    * $trueif = havegethostbyname2();
+    *   $trueif = havegethostbyname2();
+
         This function returns TRUE if Socket6 has a functioning
         gethostbyname2, otherwise it returns FALSE. See the comments above
         about the behavior of naip_gethostbyname.
 
-    * NetAddr::IP::Util::lower();
+    *   NetAddr::IP::Util::lower();
+
         Return IPv6 strings in lowercase.
 
-    * NetAddr::IP::Util::upper();
+    *   NetAddr::IP::Util::upper();
+
         Return IPv6 strings in uppercase. This is the default.
 
 EXAMPLES
@@ -457,6 +491,7 @@
         return ($vecip, $mask, $bits);
       }
 
+
       ... elsewhere
         $nip = {
             addr    => $vecip,
